import { IHttp, IModify, IPersistence, IRead } from '@rocket.chat/apps-engine/definition/accessors';
import { App } from '@rocket.chat/apps-engine/definition/App';
// import { RocketChatAssociationModel, RocketChatAssociationRecord } from '@rocket.chat/apps-engine/definition/metadata';
import { ISlashCommand, ISlashCommandPreview, ISlashCommandPreviewItem, SlashCommandContext, SlashCommandPreviewItemType } from '@rocket.chat/apps-engine/definition/slashcommands';

// import { IJitsiStorage } from './IJitsiStorage';

export class JitsiSlashCommand implements ISlashCommand {
    public command: string;
    public i18nParamsExample: string;
    public i18nDescription: string;
    public providesPreview: boolean;

    constructor(private readonly app: App) {
        this.command = 'jitisi';
        this.i18nParamsExample = 'params_example';
        this.i18nDescription = 'command_description';
        this.providesPreview = false;
    }

    // tslint:disable-next-line:max-line-length
    public async executor(context: SlashCommandContext, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<void> {
        const server = await read.getEnvironmentReader().getSettings().getValueById('server');

        const [roomName] = context.getArguments();

        const url = server + (roomName ? roomName : context.getRoom().id + '-' + context.getSender().id);

        // const assoc = new RocketChatAssociationRecord(RocketChatAssociationModel.ROOM, context.getRoom().id);

        // const data: IJitsiInStorage = {
        //     url,
        //     date: new Date(),
        // };

        return await this.sendMessage(context, modify, `Join the video call: ${ url }\nLink generated by slashcommand \`/jitsi\``);

        // switch (context.getArguments()[0].toLowerCase()) {
        //     case 'start':
        //         await persis.createWithAssociation(data, assoc);
        //         return await this.sendMessage(context, modify, url);
        //     case 'list':
        //         const existing = await read.getPersistenceReader().readByAssociation(assoc);
        //         if (existing.length === 0) {
        //             return await this.sendNotifyMessage(context, modify, 'No meetings open');
        //         }

        //         const text = existing.map((c: IJitsiInStorage, index) => {
        //             console.log(c);
        //             return `#${ index } - ${ c.url }\n`;
        //         }).join('');

        //         return await this.sendNotifyMessage(context, modify, `*Open meetings:*\n${ text }`);
        //     case 'stop':
        //         // const existing = await read.getPersistenceReader().readByAssociation(assoc);
        //         // persis.

        //         await persis.removeByAssociation(assoc);
        //     default:
        //         return await this.sendNotifyMessage(context, modify,
        //             'No idea what you are talking about. ' +
        //             'Only `start`, `list` and `stop` are accepted options for the first argument.');
        // }
    }

    // public async previewer(context: SlashCommandContext, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<ISlashCommandPreview> {
    //     const action = context.getArguments()[0];

    //     this.app.getLogger().log('arguments', context.getArguments());

    //     if (action === 'list') {
    //         const assoc = new RocketChatAssociationRecord(RocketChatAssociationModel.ROOM, context.getRoom().id);
    //         const existing = await read.getPersistenceReader().readByAssociation(assoc);

    //         const items: Array<ISlashCommandPreviewItem> = existing.map((c: IJitsiInStorage, index) => {
    //             return {
    //                 id: 'asd',
    //                 type: SlashCommandPreviewItemType.TEXT,
    //                 value: `#${ index } - ${ c.url }`,
    //             };
    //         });

    //         return {
    //             i18nTitle: 'Jitsi ongoing calls',
    //             items,
    //         };
    //     }

    //     return {
    //         i18nTitle: 'Jitsi',
    //         items: [{
    //             id: 'start',
    //             type: SlashCommandPreviewItemType.TEXT,
    //             value: 'start',
    //         }, {
    //             id: 'stop',
    //             type: SlashCommandPreviewItemType.TEXT,
    //             value: 'stop',
    //         }, {
    //             id: 'list',
    //             type: SlashCommandPreviewItemType.TEXT,
    //             value: 'list',
    //         }],
    //     };
    // }

    private async sendMessage(context: SlashCommandContext, modify: IModify, text: string): Promise<void> {
        const msg = modify.getCreator()
            .startMessage()
            .setText(text)
            // .setUsernameAlias('Jitsi')
            // .setEmojiAvatar(':calendar:')
            .setRoom(context.getRoom())
            .setSender(context.getSender());

        await modify.getCreator().finish(msg);
    }

    // private async sendNotifyMessage(context: SlashCommandContext, modify: IModify, text: string): Promise<void> {
    //     const msg = modify.getNotifer()
    //         .getMessageBuilder()
    //         .setText(text)
    //         // .setUsernameAlias('Out of Office')
    //         // .setEmojiAvatar(':calendar:')
    //         .setRoom(context.getRoom())
    //         .setSender(context.getSender())
    //         .getMessage();

    //     return await modify.getNotifer().notifyUser(context.getSender(), msg);
    // }
}
